// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bank")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyRegNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("IBAN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InvoiceAmmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Series")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("customerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("issuerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("issuerId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Domain.InvoicePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentType")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("invoiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("invoiceId");

                    b.ToTable("invoicePayments");
                });

            modelBuilder.Entity("Domain.InvoiceSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Series")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("invoiceSeries");
                });

            modelBuilder.Entity("Domain.Issuer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bank")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyRegNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("IBAN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Issuers");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UM")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Domain.ProductsInvoices", b =>
                {
                    b.Property<Guid>("invoiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("productId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("invoiceId", "productId");

                    b.HasIndex("productId");

                    b.ToTable("productsInvoices");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.Customer", "customer")
                        .WithMany("Invoices")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Issuer", "issuer")
                        .WithMany("Invoices")
                        .HasForeignKey("issuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("issuer");
                });

            modelBuilder.Entity("Domain.InvoicePayment", b =>
                {
                    b.HasOne("Domain.Invoice", "invoice")
                        .WithMany("invoicePayments")
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("Domain.ProductsInvoices", b =>
                {
                    b.HasOne("Domain.Invoice", "invoice")
                        .WithMany("productsInvoices")
                        .HasForeignKey("invoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "product")
                        .WithMany("productsInvoices")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Navigation("invoicePayments");

                    b.Navigation("productsInvoices");
                });

            modelBuilder.Entity("Domain.Issuer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("productsInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
